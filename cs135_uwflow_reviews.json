["Challenging course if you come from 0 programming experience (as myself). Assignments are creatively made and course staff are helpful. First half of the course is still okay but second half gets pretty challenging.", "Pre midterm contents are pretty easy and manageable, and the post midterm contents got really difficult really quick with mutual recursion, trees and graphs. My advice - start working on the assignments as early as you can, at least 4 days before the deadline. Go to professor and TA office hours and enjoy!!", "Good time, great time. No prior CS knowledge is required, but this course definitely favours those who have experience thinking through problems. Design recipe can be annoying to do, in my experience, just reserve an hour a week, throw on some music, and work through it all at once.", "PLEASE TAKE CS 115 if you are a math student. I have experience with C, Java and Python, and learning Racket was a pure pain in the ass. Assignments will get harder radically after midterm and then you won't be able to downgrade to CS 115, which means retaking CS becomes necessary.", "Things might seems to be moving quite fast for totally beginner, but if you have some experience in coding then the course is not hard", "Big time requirement if you haven't coded before, and Racket is painful at times.", "intro stuff", "If you have ever done programming, the assignments will be relatively easy, although they do take time. Shit got serious after trees, so expect a grade drop", "Racket is pretty useless, id recommend doing cs50 instead but make sure you utilize the office hours well, assignments wont feel as hard if you do. And if you can, get Dave Tompkins as your prof", "Try not to lose marks on design recipe. Content starting from trees becomes really hard.", "Racket seems pretty lame at the beginning, just give it like a month or two and ur gonna be fine with it.", "Some assignments do take time and effort, but overall not too hard", "One of the assignments is quite difficult, but others are fine. I'd say if you put some effort in this course, you will get high marks (90s).", "Just do the assignments and read the course slides, it's majorly practice.", "Very like this course and choose David Tompkins if you can", "Until generative recursion, everything was sailing smoothly. When general trees and graphs came in, the course felt a lot harder and I had to really spend time learning the concepts 2 to 3 times and making sure I understood them well. The final was hard :(", "Took this as someone whos never taken a cs class before and it went alright (score in the 80s). Definitely the hardest of the 3 math classes in 1A. Assignments can take long", "Good for improving critical thinking in programming if you are a beginner. The course goes from walking baby steps to running 100m in Olympics after they introduce recursion.", "The goal of this course is to be an intro into computer science and to teach good programing habits. The language you use is Racket which is quite different from many languages that people are familiar with. It can be a bit tedious and restricting but, I ended up finding it really interesting. Assignments can often be time consuming (of course) but getting a good grade on them wasn't too hard. Overall I quite liked this course and thought it did a good job achieving it's purposes.", "Lots of work but the work itself is not that difficult. Fun course, enjoyed Professor Weber Becker", "Racket was an absolute pain at the start, but you begin to enjoy it. Very well-organized course to the point where I didn't need to go to lectures. Make sure to start on assignments early, or you will probably never do it (speaking from experience). Pretty fair course structure.", "Assignments take a lot of time but if you are careful, you should be able to get close to full marks. Midterms just require practise and are doable. Course teaches on some basic/fundamental CS concepts, especially with recursion, which you'll do a lot in this course.", "If you have any CS background (i.e. doing decently well on the CCC), you will have no difficulty in the course. You will have to relearn the fundamentals of computer science and you will have to focus more on good programming practices than computer science itself. This course sorta makes you become a better programmer as you're required to do design recipes and make your code \"readable\", as well as include testing, but only covers the mere surface of computer science with things like BSTs, graphs, simple big O notation, etc. Also Racket. Very interesting programming language (it's all functional programing, as opposed to imperative programming) where you don't have variables, so you have to learn and be intuitive in Racket.", "Racket is pretty cool.", "I LOVE RACKET!!! This course was not my introduction to programming, but I liked the way it introduced topics like recursion and abstraction in a language where these things seem very natural. Most of the assignments were fun and had elegant solutions that made you appreciate racket and functional programming. Some of the later assignment problems, however, seemed to have much easier solutions in normal languages and were somewhat tedious in racket. Even though you will never use racket in the real world, I do think you will remember the concepts you learned here, which have uses far beyond this course. I hate design recipe though. It is useless after the first two assignments and a boring way to lose marks on assignments.", "Racket seems stupid at first but I understood the benefits of functional programming towards the end.", "I had almost no programming experience prior to this course. The content at the start of the course was deceivingly easy, but I really had difficulties with later assignments. Assignments took me around 10 hours to complete, if I could complete them. If you're in my position (with no prior experience), you might struggle a bit but it'll be manageable if you take the course seriously.", "Even coming from a background of programming knowledge I honestly really enjoyed CS 135 and the new perspectives it gave me. First of all: both before and after the course you'll hear a lot of people complaining about Racket, insisting that UW should be using a \"practical language\", and maybe even about how useless the course is. I would disregard this until you've completed the course and come to your own conclusions. For anyone who has mostly been using imperative languages, the idea of a functional programming language will likely seem very foreign and is actually a great learning opportunity. Doing basic imperative tasks in a functional language will allow you to start from scratch and really understand what you're doing and how you're doing it. The last 25% of the course introduces a lot of topics that you may be unfamiliar with, but if you've been following along, you'll end up understanding their implementations very thoroughly and on a more conceptual level. I'm almost a little sad we're dropping Racket next term... but that's just my view. Anyway, even if you think Racket isn't that useful in the real world (which, well, it isn't), give this course a serious chance and I think you'll have a much stronger foundation for future courses.", "The focal point of the course is purely based on recursion but is taught in an arbitrary language called Racket that no one uses ever. Plenty of other ways to teach the concepts taught in this course such as trees and lists, by using an entry-level language that could help with co-ops for those who have never touched a language before. A mark booster of a course but I'd suggest taking CS115 if you want to try out programming since you'll have to waste less time on assignments and design recipes but still get the basic fundamentals of what they're teaching you.", "https://pastebin.com/F4FdfZGQ", "Racket is a fun little language if you don't care too much about CS, but it would be nice to learn something real-world applicable as well.", "First portion of the course was pretty easy. Then they dropped the trees assignment... which for real hit diff. Otherwise, higher-order functions, lambda, locals, etc were actually pretty straightforward. Assignments weren't that painful (except the trees). Make use of office hours to check your work or if you are stuck. Get to really understand recursion and you'll probably do fine.", "Assignments kicked my ass but everyone handled things a bit differently. Had some previous Python programming experience but that didn't really translate to understanding Racket and the logic required for 135 at all. Sounds obvious but it's really important to thoroughly understand what was covered in lectures to actually be able to do the assignments.", "If you know to program well, but still struggle with the concept of binary trees and trees in general, I recommend taking this course", "First half of the course was pretty chill, and then the weekly assignments got gradually more time-consuming after the second midterm. Lectures tend to be very straightforward and clear. It is a very well-structured course. Racket is not as bad as some other described to be, it is great for teaching the contents of this course, which is to design programs methodically. Requires grave commitment if you are new to programming.", "Fun and easy course that teaches the basics of programming", "this course bangs. love fp", "leetcode in racket be like", "I think the course is a good intro to CS. You learn recursion really well, the assignments were challenging starting from A7 but it really pushes you to approach problems from different perspectives. Taking the course with Troy was a blast, he is super fun and engaging. The worse part about the course was the midterms and final that are super long and you had to write code on paper which is annoying. My best tips are to start the assignments early and most importantly, to try to understand what your code does instead of just running it and hoping for the best, I wish I did that earlier in the course because it made a big difference.", "It was so difficult but I genuinely learned a lot. I had zero experience going into the course, so I struggled to keep up, but it was rewarding. Perhaps its because I had no coding experience, but I actually found Racket to be interesting and worthwhile to learn. I'm now learning Python on my own and have found it to be much easier to understand than Racket was becuase I learned the fundamentals of coding. The skills I learned also help me with solving algebra and calculus questions as it taught me how to think step by step.", "Lots of useful theory. People hate racket but it is a simple language that can be used to learn new stuff fairly well. Assignments are very annoying.", "Good course", "racket, the language for this course is kinda annoying to deal with and the design reports on every single function is pretty annoying, but overall, the course was really useful for learning about and wrapping your head around recursion. i had the course online", "Extremely fun course, introduces you to the paradigm of functional programming using Racket as its medium. Each assignment had fun algorithmic style problems. Midterm and Final were pretty easy (But I took this in COVID so....)", "A great intro to CS which helps you build an understanding of several CS concepts, all in a way that is quite different then you must've initially learnt through OOP. The language is somewhat annoying but you'll really come to enjoy how well this course organised things and how user friendly the software was when you take future courses. It helps build a strong knowledge of recursion and other fundamental CS concepts. Profs and office hours were also very helpful.", "This course was my first taste of programming, ever so take my review with a grain of salt- I thought it was very well done and clearly organized for the Fall 2020 term (online). Recursion was very interesting, and I actually used Racket for CS 241 so I am very grateful for what I learned in this course", "Great intro to CS", "Really interesting introduction to Functional programming, lots of useful concepts covered even if Racket itself is not useful at all. As a non-math student the course was managable, but make sure you start the assignments early. FInal was hard but the midterm was easier. Overall I'd recommend this course if you are interested in CS, but be ready to put in the effort.", "Overall a useful course as it is a good introduction to functional programming, which I had never explored in-depth before. However, as someone with prior programming experience I found it extremely easy and rather slow-moving. If you have developed reasonable-sized programs or done any competitive programming, take CS 145 instead -- it seems to be far more interesting. The only big annoyance in the course was the extremely strict style guide marking -- I lost points on nearly every assignment for slight formatting errors or for missing one test case. Admittedly learning how to follow a style guide is necessary, but some of the tiny things they go after seem a bit extreme.", "Really good course taught by an excellent prof. It teaches the basics of functional programming; and it's done in Racket, which is different and adds a bit of a challenge.", "Was very well executed online! You gain a deeper understanding of how to approach coding problems.", "Pretty good introduction to university-level CS. The concepts weren't too hard, but I took this in Fall 2021 online so the slides were tedious to go through, and the assignments were also long and tedious. The exams were very fair, though.", "Racket and functional programming aren\u2019t fun, especially if you have previous coding experience, but the concepts we covered were interesting and seems useful. Start the assignments early.", "Racket takes a while to get used to, but eventually it stops feeling weird to code with. Weekly assignments were straightforward, some were a bit more tricky, but if you stare at them long enough, it will just click eventually.", "good for recursion intuition", "Some assignments take time but a 90+ is really feasible. Still wish it wasn't racket though, we would all benefit from an oopl instead of racket.", "The course was taught in Racket so you'll have to get used to how it works. I actually grew to like it a lot by the end of the term. We covered a lot of interesting topics like recursion, trees, and graphs. Difficulty ranged from really easy to really hard. Make sure to start the assignments at least 3 days before they're due or you're screwed! This class was super fun and the modules were great. Whoever the prof was that made the videos was awesome.", "This response is written after taking second year courses. Although Racket itself is not as useful as many other programming languages encountered in later courses. Racket's logic is very simple and can help you solve many math questions fast, even the ones where it cannot be handled by a calculator. This course is a good introduction to programming and it is one of the easiest programming courses out there.", "Absolute fire course. The middle of the course is tough but push through it!", "This was a great course. A great introduction to programming with a functional programming language. Assignments were sometimes hard, but doable, and they were also fun to do. I would say watch out for the transition to CS 136.", "Took this in F2020 and it was my most favorite class of the term as well as one of my most favorite class in UW so far. The course was well-organized, the weekly module was structured in a way that really helped me solidify my knowledge through a combination of slides reading, video lecture, self-check exercises in the form of quiz and coding. Learning recursion was super helpful, especially when encountering naturally recursive data such as linked lists or trees in future classes and in the industry. Overall a 10/10 class.", "Great course, fun assignments, awesome profs. Functional programming is also super cool.", "Assignments and midterms / final were all pretty easy. Byron Weber Becker was teaching and he's a great prof, made the class very fun to take", "Definitely solidifies recursion intuition!", "Awesome course! Teaches you from scratch and everything is explained nicely.", "Course was pretty easy though be extremely careful with the design recipe as missing constants or other seemingly small details can lead to large mark deductions.", "Not too sure about the usefulness of Racket, but it was an enjoyable course. I would still say I had more fun with High School Computer Science though", "Taken Online: This was my first real introduction to a programming class as my high school classes were basically a joke. Functional programming can be very cool, being forced to understand what's going on under the hood by using Racket will definitely make anyone who takes it a better programmer. Once you get the hang of Racket and are able to adjust your mind this class becomes very passable due to the grading structure. What I didn't like was the multipart questions where you get to h) and you don't even know what the questions asking. The profs did a great job transferring it to online, was my favorite class of 1A, shoutout Becker.", "Honestly, I really enjoyed the course. I thought the topic was useful and the assignments were actually a blast to do. People underestimate the design recipes too much imo, I found myself missing them while doing other courses.", "Enjoyed the course. Even though it's not going to be applicable in the future, I feel like functional programming teaches you how to think about problems in a different way which was something I enjoyed learning :) In the online section, your prof does not matter at all. All learning is basically done by reading lecture slides.", "Does what it says. Teaches you how to write functional programs. It was fun. The lectures had some high-quality videos. The best course of my first semester. Could use more videos in lectures.", "Decent course overall. Some assignments were very easy, some assignments were brutally difficult(watch out for A09). My issue lied with the delivery of the content: unlike other faculties and universities, the Math Faculty chose to have no live lectures this term. Because of this, I found myself a bit confused, however I was able to find Lesley Istead's recorded lectures on YouTube. However, the office hours were all class. Try to attend Paul Nijjar's office hours, he helps you understand a concept without making you feel bad, if that makes any sense. Inflated marks during the pandemic, the course median ended up being a 92!, which I've heard is insane for a university class.", "No lectures, only a few videos in slides from previous years. They clearly put no effort into giving us quality online learning in 2020...except office hours which were helpful. Objectively, the evaluations were fair, and self-check questions were free marks because of the way they were calculated, but I think I just hated this course and its assignments with a personal passion. Otherwise I might've liked it as many people have.", "Racket isn't really a useful language, but learning recursion with it was a lot easier than I thought. The course was also really well delivered online with the profs making lots of lecture videos that were a big help. Peep the cs135 memes on reddit lmao", "Really well designed course. Be warned that it get's a little harder towards the end and that the assignments are very time consuming.", "Although racket may seem useless, teaching this for a first-year course really allows us to learn to design function programs, which is the name of the course. I have personally applied the concepts to other languages like python and java so it definitely helps.", "CS 135, despite the COVID-19 pandemic, was run fantastically over the fall 2020 term. Honestly, I had to take this course again, if it was offered in-person, I would take this course online again because it was that well run. The instructors really did a phenomenal job running this course despite all the obstacles with online learning!", "Best online course you could take, questions are not too bad if you've done any programming before, but still approachable if you are brand new to coding", "Not hard, just requires mathematical thinking", "Took online this term, and it was very well run. Only weekly assignments, which were a challenge and took a while but were for the most part doable. The midterms were also very straightforward which was nice for a change. Super organized course, office hours was very helpful and welcoming. All in all probably my favourite course this term.", "Keep in mind, I took this course in the online term, so things may be dramatically different in a regular term. For those who have experience coding before, or find mathematics more intuitive than English, you probably won't have a hard time with this course. However, that person is NOT me, so while the first four assignments were relatively okay, most of A05-A09 was difficult for me. This course is particularly dense with material for those new to computer science, so I would recommend studying earlier rather than later. Do NOT procrastinate on the assignments, or else you may be spending Monday night struggling to meet the deadline. If you do the assignments and get high marks on them, you should be relatively okay for the midterms. That being said, the professors this online term were really nice and accommodating. They consistently asked for feedback, were responsive on Piazza, and even gave words of encouragement from time to time. Although I do not know whether what I learned is immediately applicable to other courses, I do feel I gained a better sense of how to approach problems from a systematic perspective. Should you take this course if you're not in the Math faculty? If you're considering going into tech or interested in learning how to code, it's worth a try, even if you have to drop down to CS 115 later on. If you're just looking to fulfill a requirement in your program, I would suggest a different course.", "Pretty easy course if you took cs in highschool. For the online version, don't do assignments last minute since they do take a while, and the last couple assignments get pretty tough. Midterms are pretty easy, and the learning materials were excellently put together by the staff.", "We used Racket, which is one of the worst programming languages I've ever seen, and is practically useless. In addition, 30% of our grade was documentation. That being said, the course was really well set up, and while I didn't learn a lot, it was pretty fun. We had one assignment a week which took about 3 hours (also a handful of bonus marks). I recommend this course to anyone in the faculty of math. To anyone else, find a course that teaches a real programming language.", "I'm a CS guy. This course was Racket, a functional programming language like Lisp, Scheme or Haskell. You learn a lot of things you'd other wise never learn from coding in functional languages (i.e. C/C++/C#, Java, Python, Bash, HTML/CSS/JS). It's really a whole new paradigm. The design recipe is stupid, and I fail to see how it helps. I'd prefer a more flexible documentation style where you don't get marks docked for writing `bool` instead of `Bool`. That said, because of all the bonus, it's quite easy to get a good mark. I'm currently sitting at 100.5%, just after A07 (3 more assignments and the Final to go). Make sure you be very very careful in this course and notice every little detail. I got 5% off Midterm1 because I didn't see a line in the question.", "The instructors made a fabulous job of putting together the online course. If you put in the time, you can get a great mark. Just pay attention to the design recipe!", "Pretty light course, easy to get a mark in the 90s", "CS 135 was all I could ask for in an intro programming class and more! Learning a functional programming language like Racket was super interesting, and got me to appreciate concepts like recursion a lot more. Taking it online (fall 2020), it was the most well-handled class I was in, and I felt like I genuinely learned something. The assignments were tough but doable, and in comparison to high school cs assignments, these ones taught me way more about the concepts at hand in cool ways.", "You will never use Racket in the real world and DrRacket sucks. So does the design recipe, and the entire course. Very easy to get a high mark if you're willing to put the effort, if you're not and you have experience a mark 80-90 is manageable", "Pretty easy if you took the ICS courses in high school.", "Take the online version of this course. Since I am not a new programmer, I do not see any content that is hard to understand, as long as you take your time and watch the videos carefully. Though Racket is not a popular language, it is interesting to learn about functional programming, which differs from Java and C. Assignments are much harder than assessments but are still doable, which takes 5-6 hours for each one. Start it early and ask questions frequently on Piazza. Hope that all the other CS courses can be organized like this.", "Took it online and there are wayyy too less videos. Basically reading hard topics and trust me its not useful. Assignments are really interesting but hard, don't sit on them. The midterms were a breeze. Definitely possible to get 90+ if you just complete everything properly.", "Was taught fall 2019 in Byron's class. Not the best prof, struggles to keep the class engaged and made a LOT of mistakes in the lectures. As an almost beginner to cs, this course was extremely hard and the midterm and final were also very hard though it seemed the final got curved at the end. Useless course in racket imo, cs 136 felt much better and easier.", "If you've taken any CS course before this, it won't be too difficult to pick up the basics but the language (Racket) is still different enough that you'll learn a lot. The last few assignments got exponentially difficult and time-consuming.", "This course is the first cs course for CS major students. Not a very hard course but assignments take you very long time.", "Pretty easy until you get to the 2nd midterm. Final was really hard. Still liking Racket more than C though. Recursion is OP.", "It\u2019s a course you have to just get through. It does teach some important concepts, but the fact that after a whole course I can\u2019t say I learned anything to help me get a job kinda made the whole experience worthless.", "Fairly easy course that doesn't demand any previous programming knowledge. Mostly focuses on doing things to lists in Racket, with an emphasis on different types of recursion. Weekly assignments and two midterms, but fairly easy to do well in if you put in the effort. Not too much content.", "It was a difficult course for me and I struggled with finishing the assignments. But I definitely learned a lot. It's definitely NOT an easy course and be prepared to put in the effort if you do not have prior coding skills like me.", "Good introduction course to fundamentals of computer science.", "WTF IS THIS COURSE ?!?!?! Completely destroyed my OOP mindset, which is okay, but it's not even useful in the industry so adds nothing to my resume when I need to search for a co-op after my 1A term.", "As someone who has never programmed before it was a course that I was able to excel in.", "The class covers basic coding well so advancing to a harder code does not shock as much. The course is challenging (3-7 hours to do the weekly assignments) but there are a lot of profs and TAs that are willing to help in their office hours.", "Really fun course, especially if you've never programmed in a functional language before. Really gets cool when you get to things like different forms of recursion, trees, maps and filters. Still accessible if you don't have much experience programming, but will definitely make you a better programmer if you do have prior experience otherwise.", "Racket really forces/helps you learn recursion + functional programming. You'll appreciate this course later.", "Starts pretty slow and definitely gets bogged down by the design recipe (ow). Otherwise you'll see some decent fundamental functional programming concepts, and you'll get good at recursion (assuming you do the assignments).", "If you're scared about going in with no previous experience, don't worry! The design allows people who have never coded, like me, to learn and be confident that they know what they are learning. Start assignments on time and don't half-ass them! It's ok to get 50 on a couple, but it adds up! The assignments are where you're actually gonna understand the material but lectures are important for providing you with a basic understanding. When it comes to exams, the best thing to do is practice!", "Good introduction for those who know nothing. Made recursion feel easy and natural. Functional programming is pretty cool but not explored in depth enough for me personally. If you have any previous experience this course should be quite easy overall, but if you have none it can get challenging, particularly in the middle with the pace picks up all of a sudden.", "Perfectly balanced course. Assignments were always the perfect difficulty. They were a lot of work but attainable and once you finish them you for sure will know the material 100%. Compared to Math 135 assignments, which I often needed help to solve, you can actually do these assignments if you spend the time. TA's and great and seem to care a lot. Course slides is were you learn everything, rarely used or referenced the textbook. I came into this course with minimal coding knowledge (very basic Java and Python) and has no issues.", "Easy class, functional programming might not be very useful but its a good way to get you thinking", "Picks up after assignment 6. Really gotta focus and do assignments early. Final was easier than midterms.", "As someone who had no programming knowledge previously, I was a bit apprehensive for this course. But I found it to be very manageable, as long as you go to lectures and do the assignments. The assignments start off quite straightforward and simple, but be careful towards the end- they get quite complex. Don't be that guy who starts things the day before it's due for this course.", "Good intro to big CS topics, I can see how the pacing might be fast for people who never done programming before however.", "Assignments are mostly easy, but make sure you go to office hours if you're stuck. Final exam was easier than the midterms.", "It's a course that you don't realize is going to be fun. Just listen to your prof carefully and just somehow pass through the first half of the course. It gets nicer after that", "Do the assignments and it's a breeze.", "Not a fan of Racket, but don't blame Racket if you do bad. I ended up with 74%, which for a CS major is not really good and I blamed Racket. Racket is possibly one of the best languages for learning recursion so enjoy this course. Extremely useful course, but was difficult for me.", "A very interesting course to introduce students into Computer Science. Using a functional languages like Racket makes most people with high-school computer science knowledge interested in the course, since it covers very familiar concepts in a completely different paradigm. Aside from the interesting aspects of functional programming, anyone with previous background in Computer Science may find parts of this course fairly boring, but there is something to be said about the elegance of functional languages, and the way it easily implements concepts like recursion.", "I really appreciate that we start learning CS functionally. It helped me understand the beauty of recursion and made using recursion far more natural in future courses. Racket was also very beautiful in syntax - it uses very simple and consistent syntax.", "Good intro course into CS. Even if you did cs in high school, you still may be challenged a little. Definitely a well structured course. The final was quite difficult though.", "The course teaches problem solving and introduces you to the thinking of a computer scientist. It's also great for teaching the importance of clear, documented code. However, this is a rarely used language, and as someone who hadn't programmed before, I found the course too fast-paced for me.", "The material learned is very useful and it builds a good foundation for upper year courses.", "Functional programming is slightly different from other programming you might have done in high school, which can throw off people.", "Easy course. 80% of it is just applying one recursive pattern over and over again. The final exam can be a bit long though, so be prepared to write as quickly as you can from the start.", "An easy course.", "Really interesting to functional programming. Watch out for a10 though, it was the hardest CS assignment of first year. This course is harder than cs136", "This course is certainly interesting as it uses a language you probably have never seen before. Nevertheless, it still teaches you a lot of the fundamental CS concepts and it was pretty good overall.", "Easy and very useful course, but the last assignment and the final were brutal.", "Most of the material taught in this course, you will never use again. However, it is good to know it exists. You are going to want to really understand lambda calculus and recursion, as these concepts will come back to haunt you all the time in CS, even if you never use a functional language again. Words of warning: The final exam was highly skewed towards the last two weeks. Study those lambda functions!", "Awesome course!", "Choose Prof Thompkins if you can. He makes the course easier and a lot less tedious to learn.", "Pretty easy course, especially if you have any programming experience. Watch out for graphs on the final.", "Super easy course, if you fail this you probably shouldn't be in CS", "Very useful course. Gets a little tough towards the end, but if you spend the time reading the textbook and understand the lectures, you'll be fine.", "Like CS 136, success in this course is based entirely on practice and finishing the assignments. Start assignments early! Like the day it comes out, by A7 or when recursion hits, people start having a hard time. Read ahead of the notes and practice practice practice! People come into the course thinking that it'll be a breeze because they've been programming for years. But this is functional programming. It's very likely they've never touched this kind of stuff before. But if you practice all the time and consider all the test cases when designing your functions, you'll be fine! good luck!", "Sedra Smith recommended me this course so I don't end up like one of those pig 4 students. I did very well and am happy about my life choices.", "Didn't do cs before university, ended off with 98% in this course. Just go to lectures and listen to the prof, you'll do fine.", "A good course to introduce the concepts of computer science", "Really cool course. Contrary to popular belief, it is applicable to the real world in JavaScript, Ruby/Rails, etc. Start your assignments early. Review your notes after class. Get Dave Tompkins.", "Assignments ramp up in difficulty like crazy after the midterm(s), but the course is useful. Can be pretty fast paced and easy to brush off until you realize too late that you're falling behind.", "Racket. Don't hate on it. Yes, what you learn doesn't seem directly applicable, but it really helps with understanding other concepts, and as you will find out, is actually very applicable. You will do more recursion in this course than you've ever done before.", "Fantastic course - teaches you good problem solving skills, very well laid out course", "A very easy course, however not much of the contents are useful compare to other CS courses.", "Very Interesting/Useful/Fun Course. It is difficult for first years mainly because of the new learning style and course load, I actually failed it my first time and took it again, but I got 80+ the second time and I found it much more interesting.", "Basic knowledge. Not hard if you attend classes.", "You don't need any background in programming and the concepts are straightforward. The assignments can get complicated towards the end, but that's the best part of this course. I did sudoku and solitaire for the last assignment.", "The assignments were too long. Very high load course indeed. The second midterm was brutal - barely possible to do that much in so short time. I ended up dropping the course because of the overall load.", "Pretty straightforward course - admittedly gets a bit convoluted in the last couple of modules if you've never seen the content before, but a good mark is pretty easy to get if you keep up with the assignments and go to lectures. Midterm was deceptively difficult, and final was very long but otherwise fair.", "intresting course", "A pretty easy introductory course.", "Need to put in time for this course! Do not procrastinate.", "After learning about recursion, you're pretty much stuck with it 'till the end. Otherwise, pretty interesting concepts are examined and explained.", "Great course - do the assignments!", "Very easy course, do assignments well in advance, then 80% sure to get.", "Greatest thing ever.", "A very simple introduction to programming, though in a style not so familiar. Gets more interesting and challenging nearer to the end with lambda's and abstract functions. Midterms are very simple too.", "Start the assignments as early as possible!", "This course is pretty easy, especially if you have prior programming experience. If you've never programmed before you might not have the right mindset for the problems but that should come easily enough. The assignments aren't bad and it covers some interesting topics.", "Don't get too caught up in your old imperative ways", "inspiring course with a lot of fun when taught by a good prof", "This was the one class where I took the least notes, they recommend you buy the course ware but all the slides are posted online.", "Horrible course. Moves too slowly, the homeworks are code monkey work. I don't know why everyone complains about Racket though. It's actually a nice language.", "The assignments can become more difficult later in the course. The material is certainly relevant however. It's true what they say, most of the time doing assignments is spent thinking about the design of your code rather than writing it out.", "Should be fine for anyone that has taken CS before.", "As a math student I regret not taking 115. This class was good as a programming class but I wish I could've had the time I spent on it for my math classes.", "Don't try to do it on your own! Either go to the tutorial sessions, or work through assignments with friends.", "Was ok for an intro to CS.", "First course any cs major takes at UW. Dr. Racket (language used) is ultimately quite useless, although it does teach important skills about recursion.", "We learned some basics about computer science. It covered some material regarding recursion, trees, graphs, and functional programming. The language we used \u2013 Scheme/Racket \u2013 was not that useful. I would've much preferred using a much more practical language. The tutorials were not very helpful for me.", "A very useful and informative introductory course. Some assignments have time-consuming questions but if you attend class and review the notes (which are very helpful) it is not bad.", "Make sure you do all assignments on your own and understand all the concepts in this course..", "Functional programming is poopy. That is all I can say about Scheme as both a language and a concept. (Sorry, it's called \"Racket\" now, but when I used it, it was called \"Scheme\") It's useful if you care about this kind of thinking, but I can guarantee you that no major tech industry uses this kind of thinking thus far (Q3 2013).", "Dont dislike this course just because it uses Scheme.", "Definitely do all of the tutorial practice problems to practice your LISP :)", "Uses the functional language scheme, very interesting to use", "Relatively easy material. Very basic computing.", "I found the class difficult, coming from having no programming background. It definitely gives you a good foundation for CS though. If you're planning to take more advanced programming classes, this class and 136 are probably good to have, even if you're non-major.", "May be a little daunting at first coming from high school, but stick through it and you'll be fine.", "Easy and basic course, but you will learn scheme", "This class was interesting to learn about Scheme, and lambda functions are amazing!", "The courseload was heavy and I had a prof that was hard to understand but I liked the material covered. I had never programmed before.", "Good intro to functional programming. If you're coming in with a background in imperative programming (C, Java), forget you ever knew it while you're working in Scheme (DrRacket). It'll make things easier.", "Fantastic foundation for computer science. Scheme was used as the teaching language, which I found to be a good choice. It allows for easy understanding of recursion, data structures, and other basic concepts, as it is a functional language (vs. an iterative language like C, Python, or Java). The material is easy to grasp depending on the student's ability to interpret and express abstract ideas. Tutorials are recommended regardless of how well you are doing in the course, as it consolidates the week's information in a quick and easy manner.", "Really taught us how to think in terms of programming!", "Good for recursion", "easiest CS course. i missed it", "Really cool course, especially for beginner CS course.", "One of my favourite classes so far!", "Fun programming assignments but long lectures.", "Don't hate on Scheme. Scheme's beauty is in how different it is from anything you've (likely) seen before."]