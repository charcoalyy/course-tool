{"course": "cs_146", "description": "CS 146 is an advanced-level version of CS 136. [Note: See Note 2 above. This course may be substituted for CS 136 in any degree plan or for prerequisite purposes. Students who receive a good grade in CS 135 may contact the instructor of CS 146 to seek admission without the formal prerequisites. Offered: W]", "reviews": ["Great course with Lushman -- he does a great job at structuring the course and introducing concepts in an intuitive way.", "Took it W23: much more organized compared to CS 136. We were introduced to C(basically covered all 136 contents) and mutable Racket (along with many other features) for the first half of the term. The second half involved a lot of materials in CS 24X courses, such as Hoare Logic (CS 245), and we spent the most time on interpreters, assemblers & compilers (CS 241). Assignments were getting brutal after mid-March (Q8-Q10) but very rewarding. Midterm was hard but we were told that we were allowed to resubmit one question beforehand, so the avg turned out to be quite high. The final exam was extremely easy if you have done the assignments seriously. On the instructors' side, Brad is the GOAT, explains everything super clearly with funny jokes, and TAs really put their work into this course, trying to help students in their best (very rapid response in the piazza). On a side note, CS 146 is not very strongly connected to CS 145, so do not hold back even if you took cs 135 (as I did). If you truly love cs and want to challenge yourself instead of wasting time with 136, this is definitely the choice.", "CS 146 is a challenging course, and truly grasping its content is no small feat if you haven't encountered the material before. Instead of assignments, you are given 25 \"Assignment Questions\" of vastly varying difficulty. The course begins relatively ~~SIMPL~~ simple and adjacent to 136 assignment (but not lecture) wise, but then deviates dramatically to compiler/interpreter creation, advanced memory management in C and fantasy languages. Due to the extra content, mandatory weekly tutorials that served as extra lectures were added, effectively giving the course 4+ hours of lecture per week. If you put the time and effort in, you will come out with a much better understanding of low-level computer science and software engineering. Don't be intimidated if you haven't taken an advanced course before, nearly half the class came from CS 135. The exams were (relatively) easier in our term (and previous terms, from what I understand) perhaps to compensate for difficult assignments.", "My thoughts on the course play on both sides of the good and bad spectrum. Keep in mind, my perspective is subjective, and I'm not a CCO or extremely gifted at coding, I'm a pretty average CS student. (WARNING: this review will be long as I want to give an honest and clear overview of the course) The course split is about 70/30 Racket and C, but BE WARNED, the Racket part is not what you may expect it to be (which is what happened to me). C: The C part of the course pretty much teaches everything that is taught in CS136, with the addition of some interesting facts here and there, and more enjoyable assignments. Some of them will have you working on them for hours at a time, but I personally found the C parts to be significantly easier and more intuitive (having a background in Java). The times C is taught in class is quite scattered and was always thrown in randomly, but concepts are still taught properly and will build your fundamentals. Overall quite good, but I wish it was more C. Racket: I did CS135 prior to this course, so my expectations of the Racket difficulty was quite skewed. I thought it would be just a bit harder than those assignments, and I would be fine, but that is the complete opposite. From the second assignment and onwards, I would mostly spend 5+ hours per Racket assignment, with each one having its own \"quirk\" to work out. A lot of these assignments would have a starting basis from something from class, with a lot of self-exploration for the rest, and it is not easy exploration. Be sure to pay attention in class (something I regret not doing), and be on top of your content. The course is very compiler heavy, and is something that caught me by surprise. There is a good amount of lower level programming, and, at least for me, the compiler content was not easy. Moreover, towards the end of the course, a lot of random content was thrown at you (not easy content), which makes it important to stick it through until the very end of the course. Overall, Racket part was quite difficult, was not my cup of tea, and while it may be helpful for future courses, it wasn't the most enjoyable for me. Overall, this is the hardest course I've done, and took a lot of time and lots of mental capacity. I recommend it for whoever wants a challenge, and is interested in more compiler and lower-level coding than pure C (as offered in CS136). I don't regret taking it, but I wish I knew about the course prior to taking it, so hopefully this can help people to not feel the same way I did. (PS. midterm and final is not too bad if you study, quizzes are fine, assignments are difficult but you are given ample opportunity to get perfect on them)", "Very fun course with Brad. Some questions, assignments, and quizzes are definitely designed to challenge even the most brilliant students; however, they were fun and provided immense knowledge. Even doing somewhat terribly throughout the course can net you a pretty good mark. You will, however, need to dedicate a lot of time to do certain assignments (especially towards the end), and you will need to think more abstract and think in a much different way. The course is definitely a departure from CS136, where we can focus on more low level abstract ideas, beyond just learning the C programming language. Would highly recommend it to those up for the challenge, even if it feels challenging at the moment.", "Great course that covers a lot of material that is used in future classes. You'll see content from here in cs 246, cs 245, cs 251, and likely more. Assignments are incredibly rewarding to finish, but aren't too difficult (save for the compiler + translator). More difficult than cs 145 because it's less about algorithms and more about concepts.", "Great course! While CS136 is about mostly c, this course is much more fun since in addition to the c content, it is all about an introduction to interpreters and compilers. Be prepared to get your hands dirty on many levels of abstraction, from assembly language(s) to high level functional code. This course introduces you to many different ways of thinking, starting off with mutable Racket, then moving into making interpreters and compilers. Overall, a very fun course, definitely recommend.", "I took it in-person. Lecture was somewhat useless because if you do not sit in the front rows you cannot really see what's going on due to the classroom layout. Overall the content is really fun, assignments are challenging but midterms/finals are fair.", "Very scattered but interesting. It would have been nice to have more prep material for exams. Topics covered: - Introducing C (memory management, arrays, strings) - Explaining full Racket (with mutation) - Writing interpreters for functional languages - Introducing machine language (MMIX) - Writing assemblers and compilers for imperative languages - In-class discussion on optimizing interpreters and compilers for functional languages Along the way you are introduced to 4 made-up languages: SIMPL-F, SIMPL, A-PRIMPL, and PRIMPL. You will be asked to write compilers to translate between them. It is a lot of fun but also a lot of work. Enjoyable.", "The c component of the course (~40%) was useful for learning syntax, memory management, etc. I feel like some of the topics will be transferable into c++ as well, which may make them a bit more useful. (The CS 136 content seems to just be squished in wherever it fits -- strings, void pointers, etc., turn up in pretty random places). The Racket component (~60%) is where the fun starts: there are assignments on compilers and interpreters, which get very conceptually tricky later on in the course, but are also very fun problem-solving wise, and give you a better idea of what exactly gcc is doing every time you compile your code. There's also a significant amount of de-abstraction -- consideration of real-life hardware, discussion of assembly language, and exploring how a functional language actually works on hardware. These topics were covered only briefly though -- I expect there are entire upper-year courses dedicated to them. The switch from CS 135 into 146 was quite easy, and a very smooth transition. There may be a couple unfamiliar features in full Racket that aren't taught in 135, but they're easy to catch on to. If you found 135 easy/boring, definitely give 146 a shot. Plus, getting 100% on the assignments in 146 is trivial because of the release token system -- just make sure to start each assignment early enough, so you don't run out of tokens.", "The C assignments aren't difficult, it's the content related to interpreters, compilers and assemblers as well as other things like Hoare Logic Proofs that are hard. If you see a Racket assignment, you know you're in for a ride. Hard content and fast-paced because a lot of different topics are covered. Overall, interesting course, I can see it's not for everyone (esp if you hate Racket)", "A tough course that covers way beyond what is expected in CS 136. Course content includes everything from basic C syntax and all the typical CS 136 content to racket interpreters, assemblers, compilers, MMIX assembly, hoare logic, monads, trampolining, etc. There's mandatory tutorials which act as additional lecture time, the lectures are very fast paced (seems to sort of skim over important details sometimes), and the assignments became quite challenging at the end. It's an advanced course, so that's what you're signing up for. It was definitely my hardest course of the term, but it was very educational, eye-opening, and quickly exposed me to many CS topics. Profs were fantastic.", "The course in my opinion was all over the place. It covered C memory management and writing interpreters and compilers for racket and a few made up languages. I wish they clarified this in the course description since this has nothing to do with what I want to go into, and in my opinion is fairly impractical unless you go into security research or research into formal languages. I also hate how the profs keep writing code on paper, since there were many typos in the code. The ending was also fairly all over the place since it covered many different unrelated topics at a very shallow level, such as garbage collection, continuations, trampolining, Hoare logic etc. Also, a lot of the concepts were explained fairly minimally before they jump into writing the code.", "The course content is much harder than what I expected. The syntax of C and Racket used in this course is quick to learn, but expect to figure out a lot of details behind the interpreter assignments. I started crashing ISA's office hours from Q5, and almost every one of them afterwards. The C questions are a lot more doable, but beware of the memory and pointer stuff, or your program won't even compile. Also I learned to limit my debugging time by the end, and set up a threshhold (like 8/10) above which I only perfect my solutions when I feel like it. The return truly deminishes dramatically. A quite good and memorable experience as the final CS course that I'd be able and interested to take.", "Great course! It's definitely my favourite class in undergrad so far. While I did enjoy CS145, I think this course was much better overall. The content was really interesting and it was taught well. Also, I think it's pretty easy to get a good grade in this course because of the release tokens. Took this course Winter 2021.", "Started off pretty easy, then ramped up right around midterm season and then by the end it was getting pretty theoretical. If you don't know something, ask, because there's a really good chance that the small details you don't understand will come up later on, especially when you start getting into the parts of making your own assembler, compiler, and things in Racket. Speaking of which, this course made me appreciate Racket more :)", "Worth it 100%", "Best course I've ever taken. Lectures were a bit on the heavy side (3 times a week) but I learned a ton. Assignments were really educational and some of them build off of each other so do them all! Same deal as CS145: release tokens and you get to see if you pass all the tests or not, so getting 100 on assignments (worth 60% of grade) is very feasible. We were given 9 days to complete the final assessment, which was very educational and fair (maybe even a bit easy?). Overall, I learned a lot from this course and would recommend it to everyone who's passionate about CS. One complaint I have is that the tutorials before reading week led by the TA were really unclear and rushed, pretty bad. Expect to write interpreters and compilers, and there was 60/40 split between Racket and C.", "I struggled but very interesting and important topics were taught on top of CS 136. Take only if you feel confident.", "Enjoyed this course and learned quite a bit about interpreters and imperative and functional languages. The ISA Sylvie Davies is extremely helpful on Piazza and you can tell he wants students to succeed. One small critique of my experience is that the course content and assignments seems a little dated and reused (they are). They could also be written and organized in a more engaging and clearer way. The content also seemed a little too theoretical at times. But it was great fun too, learning about Hoare logic and analyzing algorithms (using a loop invariant)!", "Great class with Brad Lushman. Several (25) short assignments worth 60% of grade and a final.", "Lots of interpreter work, so if you're looking to learn about algorithms this is not the course. But all the material is incredibly interesting", "Enrolled in 146 from 135 last semester, and it was a great decision. The content focuses a lot on how and why stuff works, which I found super interesting. Obviously, the assignments are tough but Brad does a great job and making everything build on itself.", "Really rewarding course! Would be much easier to prepare for if there was more practice for the midterm so that you don't go in blind.", "Good course, I found it very engaging and rewarding.", "Interesting and relatively easy course. There wasn't a whole lot of homework and notes were posted online (which were sometimes clearer than the lectures). Unfortunately the lack of homework and practice problems meant that we had no idea how to prepare for the midterm.", "Very interesting content; the content ensures that by the end of the semester, you truly understand exactly what is happening in low-level C code.", "Super fun and interesting course. We went into the midterm a bit blind, but other than that every bit was enjoyable. Our course happened during the COVID-19 scandal, and the transition to online was pretty seamless. The online final was a really fun challenge that built on top of what we did in class while challenging us to think in the new (after 145) imperative way.", "Take the course seriously. Will help a lot in 241E, 251 and perhaps 246E too.", "A great and very unique course. About a 1:3 C:Racket split; the Racket part covers some truly fascinating content (interpreters, compilers etc). The motivated student will also learn some Haskell, in which examples are given.", "It was a little ridiculous when Brad Lushman taught it....", "Praise Haskell Curry", "Very interesting course, cool subject material.", "Awesome course. Teaches a simple compiler, assembler, and disassembler. The assignments were interesting, but the course as a whole is easier than CS 136.", "Not a very interesting course. Learning about the low level computer concepts through simulated imperative, assembler, and machine languages offered no real intellectual challenge, only an exercise in persistence and extremely thorough testing of code. The assignments were boring, and difficult only due to the sheer number of cases to be considered. They offered no learning.", "Definitely worth taking compared to CS 136", "Fantastic course. Makes you think a lot but a lot of fun topics were covered. Exams not too hard if you understand assignments", "Attend lecture, read the notes posted after class, and really try to understand \"why\" the material is being presented the way it is instead of strictly understanding what comes at you. This course is exceptional and very interesting", "Followup course to CS 145. Students who managed a 75% in CS 145 shouldn't have too much of a problem in 146."]}