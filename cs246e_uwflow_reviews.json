["Too deep, too hard and too much stuff. Didn't end up remembering most of the things. I recommend this for those who already feel super comfortable coding in c++. The project was stressful but cool tho. I'd say c++ is the worst language for OOP.", "A bunch of useful information in this course scattered with some not so useful information that is specific to C++. The pacing of the course is fast, and I wished that we spent more time applying certain ideas of topics (design patterns, more general kinds of abstractions, ...). I think there was too much breadth in the course, making it a bit difficult to fully understanding some of the later topics discussed (template metaprogramming tricks, allocators, ...). Personally think I would have enjoyed this course a lot more if it were taught in Java (sorry Lushman), but the assignments and content still make this my favourite course in undergrad so far.", "As advertised, this is a course in Object-Oriented Development and design -- you'll learn design patterns, good use of abstraction and encapsulation, coupling vs. cohesion, and so on. It is also a course in the esoteric corners of C++, 'cause why not. Code in lecture will be optimized using strange techniques that only C++ could possibly have any use for (and that's not even counting the templates). Luckily, assignments (mostly) do not require this level of optimization. Assignments were moderately difficult (although horribly written and requiring numerous clarifications). The midterm was tricky, since it tested detailed C++ knowledge (design isn't covered much before the midterm). The final project this term was building a game engine, which is great fun -- but make sure to start early because it will eat up your time! Overall if you look past the C++, this is a solid, useful course.", "Lots of secret tests. Your assignments will be assessed on design, style, and test case coverage, not just correctness. Hard midterm. Extremely time consuming final project. (Extremely, extremely time consuming. I need to emphasize that.) Content is pretty dry and annoying to learn. Lushman is not necessarily the most enthusiastic lecturer but he is clear and I don't think there's really a better style of teaching for this type of content. I\u2019m almost certain our offering was curved. I will say that the course content has taught me a lot of useful stuff about C++.", "Waste of time. Learned few things particularly useful, of which most were not well explained. The midterm was full of C++ trivia questions or about and asked to implement things without providing adequate reference material. Prof was too lazy to write course notes. Stupid secret tests on assignments. We also had to write our own tests, which of course also has secret tests, making this course not ace-able if you want to go outside. Assignments are mostly very long, tedious, boring, unthoughtful and horrendously explained. The assignments in this course remind me why communication courses are mandatory for CS students, which of course includes the TAs. For example, we were instructed to write a function where the return type was not specified. Overall, again, a waste of time.", "Learned a lot from this course. The content was indisputably very useful and applicable. I just didn't like it.", "Useful, fun, cool", "You learn a lot of very interesting and useful stuff in this course. Loved the problem-centric + discovery style delivery of the content, made it that much more engaging and definitely helped me learn. Assignments were quite long but very rewarding - beware there's no release tests so you'll have to write your own tests! Final project was AGE game engine, which was very fun but also incredibly super big and long - most people I talked to didn't do very well on the final project (myself included), but still loved the course.", "It's about drive, it's about power. We stay hungry, we devour. Put in the work, put in the hours and take what's ours.", "godly material but i also died", "Best course I've taken, assignments are interesting, Brad is a great lecturer. A ton of C++ concepts are thrown at you but you get a lot of time on assignments so it feels quite fair. Final project is incredibly big and time-consuming but very interesting and looks pretty good on a resume.", "Most difficult CS course I've taken by far, both in terms of conceptual difficulty and workload. Material is quite rich and interesting, though. Final project was very time consuming but I think they were somewhat generous in their marking. Assignment problems were often unclear in their intent, but usually following standard implementations gives the intended solution.", "Super useful for software coops(not for passing the interview, but for the internship itself)", "Great course with interesting assignments. The final project was challenging but fun. Learned lots about best software engineering practices in C++.", "Do you value more your sanity or template metaprogramming?", "Sucks up your time but definitely worthwhile for learning C++.", "Best course taken. Very useful if you didn't know OOP before and the final project of building Vim was fun and challenging.", "Pretty useful stuff for jobs, especially the design patterns. Personally I'm against C++ but the parts covering it also teaches a lot about general abstractions which are again useful. Prepare your asses for the final project though.", "The content was cool, but some of the assignments were boring and tedious.", "Probably my favourite course so far", "Probably at least 2 times harder than any other course I've taken so far. Fun if you're smart...", "Everything the regular class covers but with 50% more material. The material is very fast paced but you learn a lot. It's really fun but the assignments can get pretty intense."]